#sessions
# removing random chr files
rm `ls * | grep "random"`

cd /media/data/brainJuice/coverages/s2
# for coverages
Rscript ~/chip/src/clusterVanilla.R

#files
chip=/media/data/sukhi/rotterdam/uniqueRot/s_2_1.fastq.chipseq.bowtie.SR.mm9.sam.srt.bam.unique
control=/media/data/sukhi/rotterdam/uniqueRot/s_5_1.fastq.chipseq.bowtie.SR.mm9.sam.srt.bam.unique

# use bed differentiator to extend the read start and end pos by 1
Rscript ~/chip/src/bedDifferntiator.R

# bedfile to bigwig
./bedGraphToBigWig ~/chip/projects/rotterdam/vanilla_R/covFile.bedDiff mm9.chrom.bedDiff chip.bw

# login to biocluster
ssh -x sukhdeeps@biocluster.biotec.tu-dresden.de
qlogin -l mem_free=46G

# fetching all files recursively using scp
scp -r sukhdeeps@biocluster.biotec.tu-dresden.de:/home/genom/sukhdeeps/workspace/rotterdam/results/files/bedGraphs/R_vanilla/ .

################################
# FP4 - FindPeaks (/home/genom/sukhdeeps/workspace/rotterdam/results/files/bedGraphs/R_vanilla/trunk)
###
Xmx is very important to set up upper ram limit like 'Xmx10G' to avoid java memory heap problems
###
# bam to bed 
time java -jar jars/conversion_util/ConvertToBed.jar -aligner BAM -input /projects/globalscratch/sukhi/rotterdam/uniqueRot/s_1_1.fastq.chipseq.bowtie.SR.mm9.sam.srt.bam.unique -output javaBowtie/ -noprepend -name javaBow_bed

# sort bedGraphs
java -jar ../jars/fp4/SortFiles.jar bed ../../grub/ *.gz


# using findPeaks
java -Xmx2G -jar ../../trunk/jars/fp4/FindPeaks.jar -input *.gz -aligner bed -output ../wig -dist_type 1 -name example -one_p

# wig2BigWig
~/wigToBigWig -clip example_triangle_standard_chr10.wig.gz ~/mm9.chrom chr10.bw

# findPeaks compare
#test run
time java -jar ../../trunk/jars/fp4/FindPeaks.jar -aligner SAM -input s1_sorted.bam.bam -compare s5_sorted.bam.bam -dist_type 3 \ -one_per -subpeaks .5 -name compare -output . -alpha 0.01 -qualityfilter 10 -log_transform

# real data
time java -jar ../trunk/jars/fp4/FindPeaks.jar -aligner SAM -input /projects/globalscratch/sukhi/rotterdam/uniqueRot/s_8_1.fastq.chipseq.bowtie.SR.mm9.sam.srt.bam.unique -compare /projects/globalscratch/sukhi/rotterdam/uniqueRot/s_5_1.fastq.chipseq.bowtie.SR.mm9.sam.srt.bam.unique -dist_type 3 \ -one_per -subpeaks .5 -name s8 -output s8/ -alpha 0.01 -qualityfilter 10 -log_transform &


##
# UCSC wiggle display
track type="wiggle_0" name="sample_filtered_compare_chr_chr6_duplicates_subpeaks_len_mode_3" description="sample_filtered_compare_chr_chr6_FL:mode_3_dupe_rds_inc" color=50,50,150 yLineMark=0.0 yLineOnOff=on visibility=2 priority=1 autoScale=on maxHeightPixels=40:40:2
#############################################################################################
# Using Egrep
egrep -w 'chr1|chr2|chr3|chr4|chr5|chr6|chr7|chr8|chr9|chr10|chr11|chr12|chr13|chr14|chr15|chr16|chr17|chr18|chr19|chrX|chrY|chrM' file > file2
##############
# findOverlaps example , using chip and control's coverages as IRanges, to find overlaps between the ranges
a=as(chip.cov,"RangedData");b=as(control.cov,"RangedData")
c=IRanges(start=a@ranges@unlistData@start[1:10],end=(a@ranges@unlistData@start[1:10]+a@ranges@unlistData@width[1:10])-1) # chip's coverage as IRanges object
d=IRanges(start=b@ranges@unlistData@start[1:10],end=(b@ranges@unlistData@start[1:10]+b@ranges@unlistData@width[1:10])-1) # control's coverage as IRanges object
findOverlaps(c,d)
#############
#manipulating the rle (coverage objects) using Views
Views(chip.cov[[1]],2999924:3111123,width=200)
###########################################
#running qsub with min and max memory options
qsub -l mem_free=46G -l h_vmem=46G ~/src/davCovq.qsub s4f.bed.removed ../s5/s5f.bed.removed
###########################################
# filtering text file using awk for a column
awk '$5 < 100' snps.bed
###########################################
#results from NCIS
$est
[1] 1.009571
$binsize.est
[1] 100
$r.depth.seq
[1] 1.009175
$pi0
[1] 1.000393
###########################################
# MACS removal of duplicates
 Duplicate reads are removed if their count is higher than can be expected from the sequencing depth (binomial distribution with a p-value smaller than 10e-5).
###########################################
#kind of merge bed ## Non-overlapping coordinates from a list that contains overlapping coordinates?
library(GenomicRanges)
in = read.table("in.bed", header=FALSE)
gr0 = with(in, GRanges(V1, IRanges(V2, V3)))
gr1 = reduce(gr0)                  # this is where the work is done
out = as.data.frame(gr)[,1:3]
write.table(out, "out.bed", header=FALSE, sep="\t", quote=FALSE, 
            row.names=FALSE, col.names=FALSE)
Extending gr0 by 100 on both ends is resize(gr0, width=width(gr0) + 200, fix="center")
########################################################################################
# genomeCoverageBed usage for bedGraph conversion
samtools view -b L317_Track-327_R1.fastq.sam.bam.sort.unique | genomeCoverageBed -ibam stdin -bg -g ~/src/useFul/ucsc/genomeIndex/mm9.chrom > L317.bedGraph &
# adding columns in repetition
nawk '{print $0, "file1 file2 file3"}' myFile
# reading one line at a time - R
files <- list.files()
for(file in files) {
  fq <- readFastq(".", pattern = file)
  # do stuff with fq...
  # then remove it
  rm(fq)
}
